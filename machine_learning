"""
Beth Gronski & Jane Chea
CSE 163 Final Project


"""

import pandas as pd
import numpy as np
import statsmodels.formula.api as smf
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split


def prep_data(heart):
    heart = heart.dropna()
    y = heart.num
    X0 = heart.drop("num", axis=1)
    X0 = pd.get_dummies(X0, drop_first=True)
    return X0


def test_model_one():
    m = KNeighborsClassifier(1)
    _ = m.fit(X0, y)
    yhat = m.predict(X0)
    rmse = np.sqrt(np.mean((y - yhat)**2))
    m.score(X0, y), rmse


def test_model_ten():
    m = KNeighborsClassifier(10)
    _ = m.fit(X0, y)
    yhat = m.predict(X0)
    rmse = np.sqrt(np.mean((y - yhat)**2))
    m.score(X0, y), rmse


def train_data():
    Xt, Xv, yt, yv = train_test_split(X0, y)


def find_ideal_num_neighbors():
    ks = range(1, 26)
    accurt = []
    accurv = []
    for k in ks:
        m = KNeighborsClassifier(k)
        _ = m.fit(Xt, yt)
        acc = m.score(Xt, yt)
        accurt.append(acc)
        accv = m.score(Xv, yv)
        accurv.append(accv)
    _ = plt.plot(ks, accurt)
    _ = plt.plot(ks, accurv)
    maxi = max(accurv)
    index = accurv.index(maxi)
    index





def main():
    heart = pd.read_csv('heart_disease_uci.csv')
    # functions


if __name__ == '__main__':
    main()